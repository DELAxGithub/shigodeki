rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function authed() {
      return request.auth != null;
    }
    
    // Helper function to check if user is a family member
    function isFamilyMember(familyId) {
      return authed() && 
        exists(/databases/$(database)/documents/families/$(familyId)) &&
        request.auth.uid in get(/databases/$(database)/documents/families/$(familyId)).data.members;
    }
    
    // Users can access their own user data and basic info of family members
    match /users/{userId} {
      // Users can always read and write their own data
      // TEMPORARY FIX: Allow broader access for family creation debugging
      allow read, write: if request.auth != null && 
        (request.auth.uid == userId || 
         // Allow if the update is adding current user to familyIds array
         (request.resource.data != null && 
          request.resource.data.keys().hasAll(['familyIds']) &&
          request.auth.uid in request.resource.data.familyIds));
      
      // Family members can read basic user info of other family members
      // This is needed for displaying family member names in the app
      allow read: if request.auth != null && 
        // Check if the target user has familyIds field and current user shares a family
        resource != null &&
        resource.data.keys().hasAll(['familyIds']) &&
        // Get current user's family IDs and check for intersection
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.familyIds != null &&
        // Check if there's any overlap in family membership
        resource.data.familyIds.hasAny(get(/databases/$(database)/documents/users/$(request.auth.uid)).data.familyIds);
    }
    
    // Project invitations - authenticated users can create and read
    match /projectInvitations/{invitationId} {
      allow read, write, create: if request.auth != null;
    }
    
    // 統一招待システム - 1つのコレクション、シンプルなルール
    match /invitations_unified/{code} {
      // 認証済みユーザーなら誰でも招待コード作成可能
      allow create: if authed() &&
        request.resource.data.createdBy == request.auth.uid &&
        request.resource.data.code == code;
      
      // 認証済みユーザーなら個別コード取得可能（参加時に必要）
      allow get: if authed();
      
      // リスト表示は禁止（セキュリティ）
      allow list: if false;
      
      // 作成者のみ更新・削除可能
      allow update, delete: if authed() &&
        request.auth.uid == resource.data.createdBy;
    }
    
    // レガシーサポート - 段階的移行期間中のみ
    // TODO: 移行完了後に削除
    match /invitations/{invitationId} {
      allow read, write, create: if request.auth != null;
    }
    
    // Family-based access control
    match /families/{familyId} {
      // Allow creation of new families by authenticated users
      allow create: if request.auth != null;
      
      // Allow reading if user is a member
      allow read: if request.auth != null && 
        request.auth.uid in resource.data.members;
      
      // Allow writing if user is a member (either in existing data or new data)
      allow update: if request.auth != null && 
        (request.auth.uid in resource.data.members || 
         request.auth.uid in request.resource.data.members);
      
      // Allow delete if user is a member
      allow delete: if request.auth != null && 
        request.auth.uid in resource.data.members;
      
      // Nested collections within families
      match /{document=**} {
        allow read, write, create, delete: if request.auth != null;
      }
    }
    
    // Projects - authenticated users can create and manage
    match /projects/{projectId} {
      allow read, write, create: if request.auth != null;
      
      // Project members subcollection
      match /members/{memberId} {
        allow read, write, create: if request.auth != null;
      }
      
      // All nested collections within projects (phases, lists, tasks, etc.)
      match /{document=**} {
        allow read, write, create, delete: if request.auth != null;
      }
    }
    
    // Tasks and related collections - authenticated users can manage
    match /{path=**}/tasks/{taskId} {
      allow read, write, create: if request.auth != null;
    }
    
    match /{path=**}/taskLists/{taskListId} {
      allow read, write, create: if request.auth != null;
    }
    
    match /{path=**}/phases/{phaseId} {
      allow read, write, create: if request.auth != null;
    }
    
    // Connection test path for app initialization
    match /test/connection {
      allow read: if true; // Temporary: Allow unauthenticated access for connection test
    }
  }
}
#!/bin/bash
# Pre-commit hook for CLAUDE.md v2025.01 compliance
# Enforces 300-line rule and basic quality checks before commit

set -e

echo "🚨 Pre-commit guardrail check (CLAUDE_VERSION: v2025.01)"
echo "========================================================"

# Colors for output
RED='\033[0;31m'
YELLOW='\033[1;33m'
GREEN='\033[0;32m'
NC='\033[0m' # No Color

# Track violations
VIOLATIONS=0

# Function to check file size
check_file_size() {
    local file="$1"
    local line_count=$(wc -l < "$file" 2>/dev/null || echo "0")
    
    if [ $line_count -gt 300 ]; then
        echo -e "${RED}❌ $file: $line_count lines (exceeds 300-line limit)${NC}"
        VIOLATIONS=$((VIOLATIONS + 1))
    elif [ $line_count -gt 250 ]; then
        echo -e "${YELLOW}⚠️  $file: $line_count lines (approaching 300-line limit)${NC}"
    else
        echo -e "${GREEN}✅ $file: $line_count lines${NC}"
    fi
}

# Get staged Swift files
echo "📋 Checking staged Swift files for size compliance..."
STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep '\.swift$' || true)

if [ -z "$STAGED_FILES" ]; then
    echo "No Swift files staged for commit."
else
    echo "Files to check:"
    for file in $STAGED_FILES; do
        echo "  - $file"
    done
    echo ""
    
    # Check each staged Swift file
    for file in $STAGED_FILES; do
        if [ -f "$file" ]; then
            check_file_size "$file"
        fi
    done
fi

# Run SwiftLint if available and configured
echo ""
echo "🔍 Running SwiftLint check..."
if command -v swiftlint >/dev/null 2>&1 && [ -f ".swiftlint.yml" ]; then
    # Run SwiftLint only on staged files
    if [ ! -z "$STAGED_FILES" ]; then
        echo "Running SwiftLint on staged files..."
        for file in $STAGED_FILES; do
            if [ -f "$file" ]; then
                swiftlint lint --config .swiftlint.yml "$file" || {
                    echo -e "${RED}❌ SwiftLint violations found in $file${NC}"
                    VIOLATIONS=$((VIOLATIONS + 1))
                }
            fi
        done
    fi
else
    echo -e "${YELLOW}⚠️  SwiftLint not found or not configured. Install with: brew install swiftlint${NC}"
fi

# Check commit message format (basic check)
echo ""
echo "📝 Checking commit message format..."
COMMIT_MSG_FILE="$1"
if [ -n "$COMMIT_MSG_FILE" ] && [ -f "$COMMIT_MSG_FILE" ]; then
    COMMIT_MSG=$(cat "$COMMIT_MSG_FILE")
    
    # Check for basic commit message structure
    if echo "$COMMIT_MSG" | grep -E '^(feat|fix|docs|style|refactor|test|chore|ci)(\(.+\))?: .{10,}' > /dev/null; then
        echo -e "${GREEN}✅ Commit message format looks good${NC}"
    else
        echo -e "${YELLOW}⚠️  Consider using conventional commit format: type(scope): description${NC}"
        echo "   Examples: feat(auth): add login validation"
        echo "            refactor(split): extract TaskRowView component"
    fi
fi

# Summary
echo ""
echo "========================================================"
if [ $VIOLATIONS -eq 0 ]; then
    echo -e "${GREEN}✅ All pre-commit checks passed!${NC}"
    echo "Proceed with commit."
    exit 0
else
    echo -e "${RED}❌ Found $VIOLATIONS violations${NC}"
    echo ""
    echo "Action required before commit:"
    echo "1. Fix file size violations (split files >300 lines)"
    echo "2. Fix SwiftLint violations"
    echo "3. Follow CLAUDE.md v2025.01 guidelines"
    echo ""
    echo "To bypass this check (NOT RECOMMENDED):"
    echo "git commit --no-verify"
    exit 1
fi